import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.awt.Toolkit;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

import javax.imageio.ImageIO;

import main.java.at.dhyan.open_imaging.GifDecoder;
import main.java.at.dhyan.open_imaging.GifDecoder.GifImage;
import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;

public class Pictextor {

	private static final int BOXSIZE = 18;
	private static final int TYPE_BYTE_GRAY = 0;

	// gets a grayscale bufferedimage and returns a "boxed" version (avg over 16*16 boxes)
	// if image is in standard rgb result will still be "boxed" grayscale of red component
	//width and height are devisible by 16
	private static BufferedImage GrayImgBoxing(BufferedImage image, int boxsize)
	{
		int sumred=0;
		int rgbvalue=0;
		int red=0;
		int tempbox=0;
		int newWidth=image.getWidth()/boxsize;
		int newHeight=image.getHeight()/boxsize;
		BufferedImage boxed = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_BYTE_GRAY);
		for (int i=0;i<newWidth;i++)
		{
			for (int j=0;j<newHeight;j++)
			{
				sumred=0;
				for (int x=0;x<boxsize;x++)
				{
					for (int y=0;y<boxsize;y++)
					{
						rgbvalue=image.getRGB(i*boxsize+x,j*boxsize+y);
						red =  (rgbvalue >> 16 ) & 0xFF;     // red component
						sumred+=red;
					}
				}
				sumred = sumred/(boxsize*boxsize); 
				tempbox= (sumred << 16) + (sumred<<8) + (sumred); // so that boxed is gray even if type byte rgb
				boxed.setRGB(i,j,tempbox);
			}
		}
		return boxed;
	}

	// will return int value of pixel(0-255) in grayscale
	// rgbint is a int representing rgb pixel value
	private static int RGBtoGray(int rgbint)  
	{
		double temp=0.0;
		int intgray=0;
	  	int alpha = (rgbint >> 24) & 0xFF;
		int red =   (rgbint >> 16) & 0xFF;
		int green = (rgbint >>  8) & 0xFF;
		int blue =  (rgbint      ) & 0xFF;
		temp = (red*0.299 + green*0.587 + blue*0.114) ; 
	/*	temp = (red + green + blue)/3.0; is also valid  */
		intgray = (int)(temp);
		int gray =(alpha >> 24)+ (intgray << 16) + (intgray<<8) + (intgray);
		return gray;
	}
	
	// get a AGBR bufferedimage and returns it in grayscale (0-255)
	private static BufferedImage ImageToGray(BufferedImage color)
	{
		int width = color.getWidth();
		int height= color.getHeight();
		int colorPixel=0;
		int grayPixel=0;
		BufferedImage gray = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
		for (int i = 0; i<width ; i++)
		{
			for (int j=0; j<height ; j++)
			{
				colorPixel=color.getRGB(i,j);
				grayPixel=RGBtoGray(colorPixel);
				gray.setRGB(i,j,grayPixel);
			}
		}
		return gray;
	}
	

	// calculate brightness of a letter(character to string)	
	public static int CalcLetterBrightness(String letter,int boxsize, boolean isbold)
	{
		int sumblue=0;
		int rgbvalue=0;
		int blue=0;
		BufferedImage tempimg = new BufferedImage(boxsize*2,boxsize*2 , BufferedImage.TYPE_4BYTE_ABGR);
	    Graphics2D tempgraphics = tempimg.createGraphics();
	    double fontSize= 6 + BOXSIZE * Toolkit.getDefaultToolkit().getScreenResolution() / 72.0;
	    if (isbold)
	    {
	    	tempgraphics.setFont(new Font("monospaced", Font.BOLD, (int)fontSize));
	    }
	    else
	    {
	    	tempgraphics.setFont(new Font("monospaced", Font.PLAIN, (int)fontSize));
	    }
	    tempgraphics.setColor(Color.BLACK);     		    
     	tempgraphics.drawString(letter,0, boxsize);    
     	 	
     	// all colored pixels should be black or white so r=g=b and there is no need for R,G vlaues
     	// type byte gray considers only the red component (and alpha?)
		for (int i=0;i<boxsize;i++)
		{
			for (int j=0;j<boxsize;j++)
			{				
						rgbvalue = tempimg.getRGB(i,j);
						blue =  (rgbvalue  >>  24  ) & 0xFF;
						sumblue = sumblue + blue;					
			}
		}
     	return sumblue;
	}
    
	// creating and printing a brightness scale	
	public static void printscale (int boxsize)
	{
		String[] stringchars = new String[]{"א", "ב", "ג", "ד", "ה","ו", "ז", "ח", "ט", "י"
									 ,"כ", "מ", "נ", "ס", "פ", "צ", "ר", "ש", "ת", "."
									 ," ", "-", "=", "+", ":", "ם"};
		int[] scale = new int[stringchars.length*2];
		
		for (int i=0 ; i<stringchars.length ; i++)
		{
			scale[i]=CalcLetterBrightness(stringchars[i], BOXSIZE, false);
			scale[i+stringchars.length]=CalcLetterBrightness(stringchars[i], BOXSIZE, true);
		}
		System.out.println(Arrays.toString(scale));
	}
	
	// create LetterPixel arraylist - list will be twice as long as stringchars
	public static ArrayList<LetterPixel> createLetterScale(String[] stringchars)
	{
		int length=0;
		length = Array.getLength(stringchars);
		int tempbright=0;
		
		ArrayList<LetterPixel> arraylist = new ArrayList<LetterPixel>();
		
		
		for(int i=0;i<length;i++)
		{
			
			tempbright = CalcLetterBrightness(stringchars[i], BOXSIZE, false);
			arraylist.add(new LetterPixel(stringchars[i],tempbright , false));
			
			
		}
		for(int i=0;i<length;i++)
		{
			tempbright = CalcLetterBrightness(stringchars[i], BOXSIZE, true);
			arraylist.add(new LetterPixel(stringchars[i],tempbright , true));
		}
		
		Collections.sort(arraylist);
		normalizeSortedArraylist(arraylist);
		
		//temp printing of list check
		for (LetterPixel lp : arraylist)
		{
			System.out.println(lp.ToString());
		}
		
		return arraylist;
	}
	
	// normalize scale's letterpixels brightness to be of range 0-255
	public static void normalizeSortedArraylist (ArrayList<LetterPixel> arraylist)
	{
		int tempbrightness=0;
		int index = arraylist.size()-1;
		LetterPixel temp = arraylist.get(index);
		int factor = temp.getBrightness();
		for (LetterPixel lp : arraylist)
		{
			tempbrightness = lp.getBrightness();
			lp.setBrightness(tempbrightness*255/factor);
		}
		
	}
	
	// match brightness to a letter from a sorted letterpixel arraylist
	public static int indexOfBrightness(int brightness, ArrayList<LetterPixel> sortedlist )
	{
		int temp=0;
		LetterPixel comparedlp = new LetterPixel("o",brightness, false);
     	int index = Collections.binarySearch(sortedlist,comparedlp,null);
     	if (index<0) // find nearest neighbor
     	{
     		int delta1=sortedlist.get(-index-1).getBrightness()-brightness;
     		int delta2=brightness-sortedlist.get(-index-2).getBrightness();
     		if (delta1-delta2<0)
     		{
     			temp=-index-1;
     		}
     		else
     		{
     			temp=-index-2;
     		}
     	}
     	else
     	{
     		temp=index;
     	}
		return temp;
	}
	
	// printing a picture from gray boxed bufferedimage
	public static BufferedImage boxedToLetters (BufferedImage boxed , ArrayList<LetterPixel> sortedlist)
	{
		int width = boxed.getWidth();
		int height = boxed.getHeight();
		int tempbrightnessindex=5;
		int tempbright = 20;
		double fontSize= 6+ BOXSIZE * Toolkit.getDefaultToolkit().getScreenResolution() / 72.0;
	/*	Comparator<LetterPixel> c = new Comparator<LetterPixel>()
        {
            public int compare(LetterPixel lp1, LetterPixel lp2)
            {
                return lp1.compareTo(lp2);
            }
        }; */
		BufferedImage tempimg = new BufferedImage(width*BOXSIZE,height*BOXSIZE , BufferedImage.TYPE_3BYTE_BGR);
	    Graphics2D tempgraphics = tempimg.createGraphics();
	    tempgraphics.setColor(Color.WHITE);
	    tempgraphics.fillRect(0, 0, width*BOXSIZE, height*BOXSIZE);
	    tempgraphics.setColor(Color.BLACK);
	    Font boldFont = new Font("monospaced", Font.BOLD, (int)fontSize);
	    Font plainFont = new Font("monospaced", Font.PLAIN, (int)fontSize);
	    tempgraphics.setFont(plainFont);
     	
		for (int i=0;i<width;i++)
		{
			for (int j=0;j<height;j++)
			{	
				
				tempbright=boxed.getRGB(i,j);
				tempbright=(tempbright >> 16) & 0xFF;  // boxed - type_byte_gray considers only the red component
				tempbrightnessindex=indexOfBrightness(255-tempbright,sortedlist);
				if (sortedlist.get(tempbrightnessindex).getBold())
				{
					tempgraphics.setFont(boldFont);
				}
				else
				{
					tempgraphics.setFont(plainFont);
				}
				tempgraphics.drawString(sortedlist.get(tempbrightnessindex).getLetter(),i*BOXSIZE, (j+1)*BOXSIZE);   
			}
		}
		return tempimg;
	}

	
	// testing printing letters all-over	- not needed(but for template purposes) working
		public static BufferedImage printletters (String letter ){

			BufferedImage tempimg = new BufferedImage(512,512 , BufferedImage.TYPE_3BYTE_BGR);
		    Graphics2D tempgraphics = tempimg.createGraphics();
		    tempgraphics.setColor(Color.WHITE);
		    tempgraphics.fillRect(0, 0, 512, 512);
		    tempgraphics.setColor(Color.BLACK);     		       
	     	tempgraphics.setFont(new Font("monospaced", Font.BOLD, 28));
	     	// all colored pixels should be black or white so r=g=b and there is no need for R,G vlaues
			for (int i=0;i<32;i++)
			{
				for (int j=0;j<32;j++)
				{				
					tempgraphics.drawString(letter,i*16, (j+1)*16);   
				}
			}
			return tempimg;
		}
		
	
	// print letter image from input path to output path, sortedScale is a sorted ArrayList<LetterPixel> 
	public static void ToLetterImage (String stringinput ,String stringoutput, ArrayList<LetterPixel> sortedScale){
        BufferedImage inputimg = null;
		try {
			inputimg = ImageIO.read(new File(stringinput));
			BufferedImage grayimg	= ImageToGray(inputimg);      
	        BufferedImage boxedimg 	= GrayImgBoxing(grayimg,BOXSIZE);
	        BufferedImage letterimg = boxedToLetters(boxedimg, sortedScale);
	        File outputimg = new File(stringoutput);
	        ImageIO.write(letterimg, "png", outputimg);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("error");
		}

	}
	
	/*----------------------------------------------------------------------------------------------------------------*/
	
	/* begin gif processing part*/
	
	
	void example(final FileInputStream data) throws Exception 
	{
		final GifImage gif = GifDecoder.read(data);
		final int width = gif.getWidth();
		final int height = gif.getHeight();
		final int background = gif.getBackgroundColor();
		final int frameCount = gif.getFrameCount();
		for (int i = 0; i < frameCount; i++) {
			final BufferedImage img = gif.getFrame(i);
			final int delay = gif.getDelay(i);
			ImageIO.write(img, "png", new File("C:\\Users\\user\\Pic2TextWorkspace\\output" + "frame_" + i + ".png"));
		}
	}
	
	
	
	public void run() {
        System.out.printf("testing testing");
      }
	
	
	
	
	// main
	public static void main(String[] args) throws IOException
	{
        Pictextor main = new Pictextor();
        JCommander.newBuilder()
            .addObject(main)
            .build()
            .parse(args);
        main.run();
        
        
               
		BufferedImage img = null;
		try {
			img = ImageIO.read(new File("C:\\Users\\user\\Pic2TextWorkspace\\Lenna.png"));			
		} 	
		catch (IOException e){
		}		
		
		BufferedImage grayimg = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_BYTE_GRAY);		
		grayimg=ImageToGray(img);		
		File output = new File("C:\\Users\\user\\Pic2TextWorkspace\\grayLenna.png");		
        ImageIO.write(grayimg, "png", output);       
        BufferedImage boxedimg = new BufferedImage(grayimg.getWidth()/BOXSIZE, grayimg.getHeight()/BOXSIZE, BufferedImage.TYPE_BYTE_GRAY);	
        boxedimg = GrayImgBoxing(grayimg,BOXSIZE);        
        File output2 = new File("C:\\Users\\user\\Pic2TextWorkspace\\boxedLenna.png");		
        ImageIO.write(boxedimg, "png", output2);
     	              
         //create normalize sorted scale 
        
         ArrayList<LetterPixel> sortedScale = new ArrayList<LetterPixel>();
         String[] scaleChars = new String[]{"א", "ב", "ג", "ד", "ה","ו", "ז", "ח", "ט", "י"
				 ,"כ", "מ", "נ", "ס", "פ", "צ", "ר", "ש", "ת", "."
				 ," ", "-", "=", "+", ":", "ם"};
         sortedScale=createLetterScale(scaleChars);
         
        
        // print letter image
        /*
        String inputmonroe = "C:\\Users\\user\\Pic2TextWorkspace\\fart-spongebob.jpg";
        String outputmonroe = "C:\\Users\\user\\Pic2TextWorkspace\\lettermonroe.png";
        ToLetterImage(inputmonroe,outputmonroe,sortedScale);

        inputmonroe = "C:\\Users\\user\\Pic2TextWorkspace\\shay.jpg";
        outputmonroe = "C:\\Users\\user\\Pic2TextWorkspace\\letterneta.png";
        ToLetterImage(inputmonroe,outputmonroe,sortedScale);
        */
        
        
        
        
        // test bufferedimage types

        File output5 = new File("C:\\Users\\user\\Pic2TextWorkspace\\testtypes.jpg");		
        ImageIO.write(printletters("a"), "jpg", output5);       

        /*---------------------------------start gif processing part------------------------------------------------------------------*/
        
        
        System.out.print("begin gif part");
        File filefile = new File("C:\\Users\\user\\Pic2TextWorkspace\\mario.gif");
    	FileInputStream data = new FileInputStream("C:\\Users\\user\\Pic2TextWorkspace"
    			+ "\\DhyanB-gifdecoder\\src\\test\\resources\\input-images\\mario.gif");
        //FileInputStream data = new FileInputStream("C:\\Users\\user\\Pic2TextWorkspace\\giftest.gif");
    	FileOutputStream output4 = new FileOutputStream ("C:\\Users\\user\\Pic2TextWorkspace\\giftest1.gif");
    	AnimatedGifEncoder e = new AnimatedGifEncoder();
    	e.start(output4);
    	e.setRepeat(0);
    	//e.setTransparent(Color.BLACK);
    	e.setQuality(7);
    	GifImage gif = GifDecoder.read(data);
		int width = gif.getWidth();
		int height = gif.getHeight();
		BufferedImage lettergif = null;
		int background = gif.getBackgroundColor();
		int frameCount = gif.getFrameCount();
		for (int i = 0; i < frameCount; i++) {
			BufferedImage gifimg = gif.getFrame(i);
			int delay = gif.getDelay(i);			
		//	ImageIO.write(gifimg, "png", new File("C:\\Users\\user\\Pic2TextWorkspace\\output\\" + "frame_" + i + ".png"));
								        
		     BufferedImage graygif=ImageToGray(gifimg);
		        
		     BufferedImage boxedgif = GrayImgBoxing(graygif,BOXSIZE);
		     
		     lettergif = boxedToLetters(boxedgif, sortedScale);
		     
		  //   ImageIO.write(lettergif, "png", new File("C:\\Users\\user\\Pic2TextWorkspace\\output\\" + "letter_frame_" + i + ".png"));
		     
		  	e.setDelay(delay*10);
		  	e.addFrame(lettergif);
		}
		
		/*
		for (int i = 0; i < frameCount; i++) {
			File framefile = new File("C:\\Users\\user\\Pic2TextWorkspace\\input\\" + "letter_frame_" + i + ".png");
			try 
			{
				lettergif = ImageIO.read(framefile);
				
			} 
		
			catch (IOException ee)
			{
			}
			e.setDelay(100);
			e.addFrame(lettergif);	
		}
		*/
		e.finish();
		 System.out.print(" end gif part");     
		  
	}
	
}
